#!/bin/bash
read -p "AWS Region: (ex. us-east-1) " region
echo AWS Region is $region
read -p "Stack Name: (ex. na1usc1) " stackname
echo Stack Name is $stackname
read -p "CIDR 2nd Octet: (ex. 100) " cidr2ndoctet
echo CIDR 2nd Octet is $cdir2ndoctet
read -p "AMI: (ex. ami-eb4133fc) " ami
echo AMI is $ami
read -p "ns1 EIP: (ex. eipalloc-7042224f) " ns1eip
echo ns1 EIP is $ns1eip
read -p "ns2 EIP: (ex. eipalloc-d94929e6) " ns2eip
echo ns2 EIP is $ns2eip
read -p "NAT GW A EIP: (ex. eipalloc-77543448) " natgwaeip
echo NAT GW A EIP is $natgwaeip
read -p "NAT GW B EIP: (ex. eipalloc-1a503025) " natgwbeip
echo NAT GW B EIP is $natgwbeip
read -p "NAT GW C EIP: (ex. eipalloc-b050308f) " natgwceip
echo NAT GW C EIP is $natgwceip
read -p "monitor1 EIP: (ex. ) " monitor1eip
echo monitor1 EIP is $monitor1eip
read -p "SSL Certificate Name: (ex. InsideSales) " sslcertname
echo SSL Certificate Name is $sslcertname
read -p "Number of DB Clusters: (ex. 5) " numdbclusters
echo Number of DB Clusters is $numdbclusters

aws \
--output 'text' \
--region "${region}" \
cloudformation \
create-stack \
--stack-name "${stackname}" \
--template-body 'file://../../cloudformation/VPC.template' \
--parameters \
"ParameterKey=CIDR2ndOctet,ParameterValue=${cidr2ndoctet}" \
"ParameterKey=DNSAMI,ParameterValue=${ami}" \
'ParameterKey=DNSInstanceType,ParameterValue=t2.medium' \
"ParameterKey=DNSServerAExistingEIP,ParameterValue=${ns1eip}" \
"ParameterKey=DNSServerBExistingEIP,ParameterValue=${ns2eip}" \
"ParameterKey=NATGatewayAExistingEIP,ParameterValue=${natgwaeip}" \
"ParameterKey=NATGatewayBExistingEIP,ParameterValue=${natgwbeip}" \
"ParameterKey=NATGatewayCExistingEIP,ParameterValue=${natgwceip}" \
'ParameterKey=Environment,ParameterValue=Production' \
'ParameterKey=TerminationProtection,ParameterValue=false' \
--on-failure 'DO_NOTHING' > /dev/null

if [ $? -eq 0 ]; then
	echo $(date) 'VPC stack started. :)'
else
	echo $(date) 'VPC stack creation failed. :('
	exit 1
fi

sleep=60
counter=0
timeout=3600

echo -n $(date) 'Waiting for VPC stack to finish...'

start=$(date +%s)

while [ true ]; do
	if [ "${counter}" -ge "${timeout}" ]; then
		echo 'timeout! :('
		exit 1
	fi

	stack_status=$(aws --output 'text' --region "${region}" --query 'Stacks[].StackStatus' cloudformation describe-stacks --stack-name "${stackname}" 2> /dev/null)

	if [ "${stack_status}" == "CREATE_COMPLETE" ]; then
		break
	elif [ "${stack_status}" == "CREATE_FAILED" ]; then
		echo 'failed! :('
		exit 1
	fi

	echo -n '.'
	sleep ${sleep}
	counter=$(bc <<< "${counter} + ${sleep}")
done

finish=$(date +%s)

echo 'finished! :)' $(bc <<< "$finish - $start") 'seconds'

aws \
--output 'text' \
--region "${region}" \
cloudformation \
create-stack \
--stack-name "${stackname}systems" \
--template-body 'file://../../cloudformation/systems.template' \
--parameters \
"ParameterKey=SystemsAMI,ParameterValue=${ami}" \
"ParameterKey=TargetEnvironment,ParameterValue=${stackname}" \
'ParameterKey=TerminationProtection,ParameterValue=false' \
--on-failure 'DO_NOTHING' > /dev/null

if [ $? -eq 0 ]; then
	echo $(date) 'Systems stack started. :)'
else
	echo $(date) 'Systems stack creation failed. :('
	exit 1
fi

sleep=60
counter=0
timeout=3600

echo -n $(date) 'Waiting for Systems stack to finish...'

start=$(date +%s)

while [ true ]; do
	if [ "${counter}" -ge "${timeout}" ]; then
		echo 'timeout! :('
		exit 1
	fi

	stack_status=$(aws --output 'text' --region "${region}" --query 'Stacks[].StackStatus' cloudformation describe-stacks --stack-name "${stackname}systems" 2> /dev/null)

	if [ "${stack_status}" == "CREATE_COMPLETE" ]; then
		break
	elif [ "${stack_status}" == "CREATE_FAILED" ]; then
		echo 'failed! :('
		exit 1
	fi

	echo -n '.'
	sleep ${sleep}
	counter=$(bc <<< "${counter} + ${sleep}")
done

finish=$(date +%s)

echo 'finished! :)' $(bc <<< "$finish - $start") 'seconds'

aws \
--output 'text' \
--region "${region}" \
cloudformation \
create-stack \
--stack-name "${stackname}pub" \
--template-body 'file://../../cloudformation/pub.template' \
--parameters \
"ParameterKey=Certificate,ParameterValue=${sslcertname}" \
"ParameterKey=PubAMI,ParameterValue=${ami}" \
"ParameterKey=TargetEnvironment,ParameterValue=${stackname}" \
'ParameterKey=TerminationProtection,ParameterValue=false' \
--on-failure 'DO_NOTHING' > /dev/null

if [ $? -eq 0 ]; then
	echo $(date) 'Pub stack started. :)'
	stacks+=("${stackname}pub")
	sleep 30
else
	echo $(date) 'Pub stack creation failed. :('
	exit 1
fi

aws \
--output 'text' \
--region "${region}" \
cloudformation \
create-stack \
--stack-name "${stackname}dialer" \
--template-body 'file://../../cloudformation/dialer.template' \
--parameters \
"ParameterKey=EhAMI,ParameterValue=${ami}" \
"ParameterKey=InboundAMI,ParameterValue=${ami}" \
"ParameterKey=MqAMI,ParameterValue=${ami}" \
"ParameterKey=SipAMI,ParameterValue=${ami}" \
"ParameterKey=TargetEnvironment,ParameterValue=${stackname}" \
'ParameterKey=TerminationProtection,ParameterValue=false' \
--on-failure 'DO_NOTHING' > /dev/null

if [ $? -eq 0 ]; then
	echo $(date) 'Dialer stack started. :)'
	stacks+=("${stackname}dialer")
	sleep 30
else
	echo $(date) 'Dialer stack creation failed. :('
	exit 1
fi

aws \
--output 'text' \
--region "${region}" \
cloudformation \
create-stack \
--stack-name "${stackname}application" \
--template-body 'file://../../cloudformation/application.template' \
--parameters \
"ParameterKey=Certificate,ParameterValue=${sslcertname}" \
"ParameterKey=JpAMI,ParameterValue=${ami}" \
"ParameterKey=SocketAMI,ParameterValue=${ami}" \
"ParameterKey=TargetEnvironment,ParameterValue=${stackname}" \
'ParameterKey=TerminationProtection,ParameterValue=false' \
"ParameterKey=WebAMI,ParameterValue=${ami}" \
"ParameterKey=WorkerAMI,ParameterValue=${ami}" \
--on-failure 'DO_NOTHING' > /dev/null

if [ $? -eq 0 ]; then
	echo $(date) 'Application stack started. :)'
	stacks+=("${stackname}application")
	sleep 30
else
	echo $(date) 'Application stack creation failed. :('
	exit 1
fi

aws \
--output 'text' \
--region "${region}" \
cloudformation \
create-stack \
--stack-name "${stackname}mdb1" \
--template-body 'file://../../cloudformation/mdb.template' \
--parameters \
"ParameterKey=DatabaseAMI,ParameterValue=${ami}" \
'ParameterKey=DataVolumeEncryption,ParameterValue=true' \
"ParameterKey=TargetEnvironment,ParameterValue=${stackname}" \
'ParameterKey=TerminationProtection,ParameterValue=false' \
--on-failure 'DO_NOTHING' > /dev/null

if [ $? -eq 0 ]; then
	echo $(date) 'MongoDB (mdb1) stack started. :)'
	stacks+=("${stackname}mdb1")
	sleep 30
else
	echo $(date) 'MongoDB (mdb1) stack creation failed. :('
	exit 1
fi

aws \
--output 'text' \
--region "${region}" \
cloudformation \
create-stack \
--stack-name "${stackname}core" \
--template-body 'file://../../cloudformation/core.template' \
--parameters \
'ParameterKey=DataVolumeEncryption,ParameterValue=true' \
"ParameterKey=DeployAMI,ParameterValue=${ami}" \
"ParameterKey=MonitorAMI,ParameterValue=${ami}" \
"ParameterKey=MonitorServerExistingEIP,ParameterValue=${monitor1eip}" \
"ParameterKey=StatsAMI,ParameterValue=${ami}" \
"ParameterKey=TargetEnvironment,ParameterValue=${stackname}" \
'ParameterKey=TerminationProtection,ParameterValue=false' \
--on-failure 'DO_NOTHING' > /dev/null

if [ $? -eq 0 ]; then
	echo $(date) 'Core stack started. :)'
	stacks+=("${stackname}core")
	sleep 30
else
	echo $(date) 'Core stack creation failed. :('
	exit 1
fi

for cluster in $(seq $numdbclusters); do
	aws \
	--output 'text' \
	--region "${region}" \
	cloudformation \
	create-stack \
	--stack-name "${stackname}db${cluster}" \
	--template-body 'file://../../cloudformation/db.template' \
	--parameters \
	"ParameterKey=DatabaseAMI,ParameterValue=${ami}" \
	'ParameterKey=DataVolumeEncryption,ParameterValue=true' \
	"ParameterKey=TargetEnvironment,ParameterValue=${stackname}" \
	'ParameterKey=TerminationProtection,ParameterValue=false' \
	--on-failure 'DO_NOTHING' > /dev/null

	if [ $? -eq 0 ]; then
		echo $(date) "MySQL (db${cluster}) stack started. :)"
		stacks+=("${stackname}db${cluster}")
		sleep 30
	else
		echo $(date) "MySQL (db${cluster}) stack creation failed. :("
		exit 1
	fi
done

sleep=60
counter=0
timeout=3600

echo -n $(date) "Waiting for ${#stacks[@]} stacks to finish..."

start=$(date +%s)

while [ "${#stacks[@]}" -gt 0 ]; do
	if [ "${counter}" -ge "${timeout}" ]; then
		echo 'timeout! :('
		exit 1
	fi

	for stack in "${!stacks[@]}"; do
		stack_status=$(aws --output 'text' --region "${region}" --query 'Stacks[].StackStatus' cloudformation describe-stacks --stack-name "${stacks[stack]}" 2> /dev/null)

		if [ "${stack_status}" == "CREATE_COMPLETE" ]; then
			echo -n "${stacks[stack]} $(bc <<< "$(date +%s) - $start")..."
			unset stacks[stack]
		elif [ "${stack_status}" == "CREATE_FAILED" ]; then
			echo "failed (${stacks[stack]})! :("
			exit 1
		fi

		sleep 1
	done

	echo -n '.'
	sleep ${sleep}
	counter=$(bc <<< "${counter} + ${sleep}")
done

finish=$(date +%s)

echo 'finished! :)' $(bc <<< "$finish - $start") 'seconds'
